/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters;

import lwjake2.Defines;
import lwjake2.game.EntDieAdapter;
import lwjake2.game.EntPainAdapter;
import lwjake2.game.EntThinkAdapter;
import lwjake2.game.GameAI;
import lwjake2.game.GameBase;
import lwjake2.game.GameMisc;
import lwjake2.game.GameUtil;
import lwjake2.game.Monster;
import lwjake2.game.edict_t;
import lwjake2.game.mframe_t;
import lwjake2.game.mmove_t;
import lwjake2.game.monsters.M_Flash;
import lwjake2.util.Lib;
import lwjake2.util.Math3D;

public class M_Supertank {

    // This file generated by ModelGen - Do NOT Modify

    public final static int FRAME_attak1_1 = 0;

    public final static int FRAME_attak1_6 = 5;

    public final static int FRAME_attak1_7 = 6;

    public final static int FRAME_attak1_20 = 19;

    public final static int FRAME_attak2_1 = 20;

    public final static int FRAME_attak2_8 = 27;

    public final static int FRAME_attak2_11 = 30;

    public final static int FRAME_attak2_14 = 33;

    public final static int FRAME_attak2_27 = 46;

    public final static int FRAME_attak3_1 = 47;

    public final static int FRAME_attak3_27 = 73;

    public final static int FRAME_attak4_1 = 74;

    public final static int FRAME_attak4_6 = 79;

    public final static int FRAME_backwd_1 = 80;

    public final static int FRAME_backwd_18 = 97;

    public final static int FRAME_death_1 = 98;

    public final static int FRAME_death_24 = 121;

    public final static int FRAME_forwrd_1 = 128;

    public final static int FRAME_forwrd_18 = 145;

    public final static int FRAME_left_1 = 146;

    public final static int FRAME_left_18 = 163;

    public final static int FRAME_pain1_1 = 164;

    public final static int FRAME_pain1_4 = 167;

    public final static int FRAME_pain2_5 = 168;

    public final static int FRAME_pain2_8 = 171;

    public final static int FRAME_pain3_9 = 172;

    public final static int FRAME_pain3_12 = 175;

    public final static int FRAME_right_1 = 176;

    public final static int FRAME_right_18 = 193;

    public final static int FRAME_stand_1 = 194;

    public final static int FRAME_stand_60 = 253;

    public final static float MODEL_SCALE = 1.000000f;

    static int sound_pain1;

    static int sound_pain2;

    static int sound_pain3;

    static int sound_death;

    static int sound_search1;

    static int sound_search2;

    static int tread_sound;

    static EntThinkAdapter TreadSound = new EntThinkAdapter() {
        public String getID(){ return "TreadSound"; }
        public boolean think(edict_t self) {
            GameBase.gi.sound(self, Defines.CHAN_VOICE, tread_sound, 1,
                    Defines.ATTN_NORM, 0);
            return true;
        }
    };

    static EntThinkAdapter supertank_search = new EntThinkAdapter() {
        public String getID(){ return "supertank_search"; }
        public boolean think(edict_t self) {
            if (Lib.random() < 0.5)
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_search1, 1,
                        Defines.ATTN_NORM, 0);
            else
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_search2, 1,
                        Defines.ATTN_NORM, 0);
            return true;
        }
    };

    //
    // stand
    //

    static mframe_t supertank_frames_stand[] = new mframe_t[] {
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null) };

    static mmove_t supertank_move_stand = new mmove_t(FRAME_stand_1,
            FRAME_stand_60, supertank_frames_stand, null);

    static EntThinkAdapter supertank_stand = new EntThinkAdapter() {
        public String getID() { return "supertank_stand"; }
        public boolean think(edict_t self) {
            self.monsterinfo.currentmove = supertank_move_stand;
            return true;
        }
    };

    static mframe_t supertank_frames_run[] = new mframe_t[] {
            new mframe_t(GameAI.ai_run, 12, TreadSound),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null),
            new mframe_t(GameAI.ai_run, 12, null) };

    static mmove_t supertank_move_run = new mmove_t(FRAME_forwrd_1,
            FRAME_forwrd_18, supertank_frames_run, null);

    //
    // walk
    //

    static mframe_t supertank_frames_forward[] = new mframe_t[] {
            new mframe_t(GameAI.ai_walk, 4, TreadSound),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null),
            new mframe_t(GameAI.ai_walk, 4, null) };

    static mmove_t supertank_move_forward = new mmove_t(FRAME_forwrd_1,
            FRAME_forwrd_18, supertank_frames_forward, null);

    static EntThinkAdapter supertank_forward = new EntThinkAdapter() {
        public String getID(){ return "supertank_forward"; }
        public boolean think(edict_t self) {
            self.monsterinfo.currentmove = supertank_move_forward;
            return true;
        }
    };

    static EntThinkAdapter supertank_walk = new EntThinkAdapter() {
        public String getID(){ return "supertank_walk"; }
        public boolean think(edict_t self) {
            self.monsterinfo.currentmove = supertank_move_forward;
            return true;
        }
    };

    static EntThinkAdapter supertank_run = new EntThinkAdapter() {
        public String getID(){ return "supertank_run"; }
        public boolean think(edict_t self) {
            if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
                self.monsterinfo.currentmove = supertank_move_stand;
            else
                self.monsterinfo.currentmove = supertank_move_run;
            return true;
        }
    };

    //
    // death
    //
    static EntThinkAdapter supertank_dead = new EntThinkAdapter() {
        public String getID(){ return "supertank_dead"; }
        public boolean think(edict_t self) {
            Math3D.VectorSet(self.mins, -60, -60, 0);
            Math3D.VectorSet(self.maxs, 60, 60, 72);
            self.movetype = Defines.MOVETYPE_TOSS;
            self.svflags |= Defines.SVF_DEADMONSTER;
            self.nextthink = 0;
            GameBase.gi.linkentity(self);
            return true;
        }
    };

    static EntThinkAdapter supertankRocket = new EntThinkAdapter() {
        public String getID(){ return "supertankRocket"; }
        public boolean think(edict_t self) {
            float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
            float[] start = { 0, 0, 0 };
            float[] dir = { 0, 0, 0 };
            float[] vec = { 0, 0, 0 };
            int flash_number;

            if (self.s.frame == FRAME_attak2_8)
                flash_number = Defines.MZ2_SUPERTANK_ROCKET_1;
            else if (self.s.frame == FRAME_attak2_11)
                flash_number = Defines.MZ2_SUPERTANK_ROCKET_2;
            else
                // (self.s.frame == FRAME_attak2_14)
                flash_number = Defines.MZ2_SUPERTANK_ROCKET_3;

            Math3D.AngleVectors(self.s.angles, forward, right, null);
            Math3D.G_ProjectSource(self.s.origin,
                    M_Flash.monster_flash_offset[flash_number], forward, right,
                    start);

            Math3D.VectorCopy(self.enemy.s.origin, vec);
            vec[2] += self.enemy.viewheight;
            Math3D.VectorSubtract(vec, start, dir);
            Math3D.VectorNormalize(dir);

            Monster
                    .monster_fire_rocket(self, start, dir, 50, 500,
                            flash_number);
            return true;
        }
    };

    static EntThinkAdapter supertankMachineGun = new EntThinkAdapter() {
        public String getID(){ return "supertankMachineGun"; }
        public boolean think(edict_t self) {
            float[] dir = { 0, 0, 0 };
            float[] vec = { 0, 0, 0 };
            float[] start = { 0, 0, 0 };
            float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
            int flash_number;

            flash_number = Defines.MZ2_SUPERTANK_MACHINEGUN_1
                    + (self.s.frame - FRAME_attak1_1);

            //FIXME!!!
            dir[0] = 0;
            dir[1] = self.s.angles[1];
            dir[2] = 0;

            Math3D.AngleVectors(dir, forward, right, null);
            Math3D.G_ProjectSource(self.s.origin,
                    M_Flash.monster_flash_offset[flash_number], forward, right,
                    start);

            if (self.enemy != null) {
                Math3D.VectorCopy(self.enemy.s.origin, vec);
                Math3D.VectorMA(vec, 0, self.enemy.velocity, vec);
                vec[2] += self.enemy.viewheight;
                Math3D.VectorSubtract(vec, start, forward);
                Math3D.VectorNormalize(forward);
            }

            Monster.monster_fire_bullet(self, start, forward, 6, 4,
                    Defines.DEFAULT_BULLET_HSPREAD,
                    Defines.DEFAULT_BULLET_VSPREAD, flash_number);
            return true;
        }
    };

    static EntThinkAdapter supertank_attack = new EntThinkAdapter() {
        public String getID(){ return "supertank_attack"; }
        public boolean think(edict_t self) {
            float[] vec = { 0, 0, 0 };
            float range;
            //float r;

            Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, vec);
            range = Math3D.VectorLength(vec);

            //r = random();

            // Attack 1 == Chaingun
            // Attack 2 == Rocket Launcher

            if (range <= 160) {
                self.monsterinfo.currentmove = supertank_move_attack1;
            } else { // fire rockets more often at distance
                if (Lib.random() < 0.3)
                    self.monsterinfo.currentmove = supertank_move_attack1;
                else
                    self.monsterinfo.currentmove = supertank_move_attack2;
            }
            return true;
        }
    };

    static mframe_t supertank_frames_turn_right[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, TreadSound),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_turn_right = new mmove_t(FRAME_right_1,
            FRAME_right_18, supertank_frames_turn_right, supertank_run);

    static mframe_t supertank_frames_turn_left[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, TreadSound),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_turn_left = new mmove_t(FRAME_left_1,
            FRAME_left_18, supertank_frames_turn_left, supertank_run);

    static mframe_t supertank_frames_pain3[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_pain3 = new mmove_t(FRAME_pain3_9,
            FRAME_pain3_12, supertank_frames_pain3, supertank_run);

    static mframe_t supertank_frames_pain2[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_pain2 = new mmove_t(FRAME_pain2_5,
            FRAME_pain2_8, supertank_frames_pain2, supertank_run);

    static mframe_t supertank_frames_pain1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_pain1 = new mmove_t(FRAME_pain1_1,
            FRAME_pain1_4, supertank_frames_pain1, supertank_run);

    static mframe_t supertank_frames_death1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, M_Supertank.BossExplode) };

    static mmove_t supertank_move_death = new mmove_t(FRAME_death_1,
            FRAME_death_24, supertank_frames_death1, supertank_dead);

    static mframe_t supertank_frames_backward[] = new mframe_t[] {
            new mframe_t(GameAI.ai_walk, 0, TreadSound),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null),
            new mframe_t(GameAI.ai_walk, 0, null) };

    static mmove_t supertank_move_backward = new mmove_t(FRAME_backwd_1,
            FRAME_backwd_18, supertank_frames_backward, null);

    static mframe_t supertank_frames_attack4[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_attack4 = new mmove_t(FRAME_attak4_1,
            FRAME_attak4_6, supertank_frames_attack4, supertank_run);

    static mframe_t supertank_frames_attack3[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_attack3 = new mmove_t(FRAME_attak3_1,
            FRAME_attak3_27, supertank_frames_attack3, supertank_run);

    static mframe_t supertank_frames_attack2[] = new mframe_t[] {
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, supertankRocket),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, supertankRocket),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, supertankRocket),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_attack2 = new mmove_t(FRAME_attak2_1,
            FRAME_attak2_27, supertank_frames_attack2, supertank_run);

    static EntThinkAdapter supertank_reattack1 = new EntThinkAdapter() {
        public String getID(){ return "supertank_reattack1"; }
        public boolean think(edict_t self) {
            if (GameUtil.visible(self, self.enemy))
                if (Lib.random() < 0.9)
                    self.monsterinfo.currentmove = supertank_move_attack1;
                else
                    self.monsterinfo.currentmove = supertank_move_end_attack1;
            else
                self.monsterinfo.currentmove = supertank_move_end_attack1;
            return true;
        }
    };

    static mframe_t supertank_frames_attack1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_charge, 0, supertankMachineGun),
            new mframe_t(GameAI.ai_charge, 0, supertankMachineGun),
            new mframe_t(GameAI.ai_charge, 0, supertankMachineGun),
            new mframe_t(GameAI.ai_charge, 0, supertankMachineGun),
            new mframe_t(GameAI.ai_charge, 0, supertankMachineGun),
            new mframe_t(GameAI.ai_charge, 0, supertankMachineGun), };

    static mmove_t supertank_move_attack1 = new mmove_t(FRAME_attak1_1,
            FRAME_attak1_6, supertank_frames_attack1, supertank_reattack1);

    static mframe_t supertank_frames_end_attack1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t supertank_move_end_attack1 = new mmove_t(FRAME_attak1_7,
            FRAME_attak1_20, supertank_frames_end_attack1, supertank_run);

    static EntPainAdapter supertank_pain = new EntPainAdapter() {
        public String getID(){ return "supertank_pain"; }
        public void pain(edict_t self, edict_t other, float kick, int damage) {
            if (self.health < (self.max_health / 2))
                self.s.skinnum = 1;

            if (GameBase.level.time < self.pain_debounce_time)
                return;

            // Lessen the chance of him going into his pain frames
            if (damage <= 25)
                if (Lib.random() < 0.2)
                    return;

            // Don't go into pain if he's firing his rockets
            if (GameBase.skill.value >= 2)
                if ((self.s.frame >= FRAME_attak2_1)
                        && (self.s.frame <= FRAME_attak2_14))
                    return;

            self.pain_debounce_time = GameBase.level.time + 3;

            if (GameBase.skill.value == 3)
                return; // no pain anims in nightmare

            if (damage <= 10) {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1,
                        Defines.ATTN_NORM, 0);
                self.monsterinfo.currentmove = supertank_move_pain1;
            } else if (damage <= 25) {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain3, 1,
                        Defines.ATTN_NORM, 0);
                self.monsterinfo.currentmove = supertank_move_pain2;
            } else {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1,
                        Defines.ATTN_NORM, 0);
                self.monsterinfo.currentmove = supertank_move_pain3;
            }
        }
    };

    static EntDieAdapter supertank_die = new EntDieAdapter() {
        public String getID(){ return "supertank_die"; }
        public void die(edict_t self, edict_t inflictor, edict_t attacker,
                int damage, float[] point) {
            GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death, 1,
                    Defines.ATTN_NORM, 0);
            self.deadflag = Defines.DEAD_DEAD;
            self.takedamage = Defines.DAMAGE_NO;
            self.count = 0;
            self.monsterinfo.currentmove = supertank_move_death;
        }
    };

    //
    // monster_supertank
    //

    /*
     * QUAKED monster_supertank (1 .5 0) (-64 -64 0) (64 64 72) Ambush
     * Trigger_Spawn Sight
     */
    public static EntThinkAdapter SP_monster_supertank = new EntThinkAdapter() {
        public String getID(){ return "SP_monster_supertank"; }
        public boolean think(edict_t self) {
            if (GameBase.deathmatch.value != 0) {
                GameUtil.G_FreeEdict(self);
                return true;
            }

            sound_pain1 = GameBase.gi.soundindex("bosstank/btkpain1.wav");
            sound_pain2 = GameBase.gi.soundindex("bosstank/btkpain2.wav");
            sound_pain3 = GameBase.gi.soundindex("bosstank/btkpain3.wav");
            sound_death = GameBase.gi.soundindex("bosstank/btkdeth1.wav");
            sound_search1 = GameBase.gi.soundindex("bosstank/btkunqv1.wav");
            sound_search2 = GameBase.gi.soundindex("bosstank/btkunqv2.wav");

            //    self.s.sound = gi.soundindex ("bosstank/btkengn1.wav");
            tread_sound = GameBase.gi.soundindex("bosstank/btkengn1.wav");

            self.movetype = Defines.MOVETYPE_STEP;
            self.solid = Defines.SOLID_BBOX;
            self.s.modelindex = GameBase.gi
                    .modelindex("models/monsters/boss1/tris.md2");
            Math3D.VectorSet(self.mins, -64, -64, 0);
            Math3D.VectorSet(self.maxs, 64, 64, 112);

            self.health = 1500;
            self.gib_health = -500;
            self.mass = 800;

            self.pain = supertank_pain;
            self.die = supertank_die;
            self.monsterinfo.stand = supertank_stand;
            self.monsterinfo.walk = supertank_walk;
            self.monsterinfo.run = supertank_run;
            self.monsterinfo.dodge = null;
            self.monsterinfo.attack = supertank_attack;
            self.monsterinfo.search = supertank_search;
            self.monsterinfo.melee = null;
            self.monsterinfo.sight = null;

            GameBase.gi.linkentity(self);

            self.monsterinfo.currentmove = supertank_move_stand;
            self.monsterinfo.scale = MODEL_SCALE;

            GameAI.walkmonster_start.think(self);
            return true;
        }
    };

    /** Common Boss explode animation. */
    
    public static EntThinkAdapter BossExplode = new EntThinkAdapter() {
        public String getID(){ return "BossExplode"; }
        public boolean think(edict_t self) {
            float[] org = { 0, 0, 0 };
    
            int n;
    
            self.think = BossExplode;
            Math3D.VectorCopy(self.s.origin, org);
            org[2] += 24 + (Lib.rand() & 15);
            switch (self.count++) {
            case 0:
                org[0] -= 24;
                org[1] -= 24;
                break;
            case 1:
                org[0] += 24;
                org[1] += 24;
                break;
            case 2:
                org[0] += 24;
                org[1] -= 24;
                break;
            case 3:
                org[0] -= 24;
                org[1] += 24;
                break;
            case 4:
                org[0] -= 48;
                org[1] -= 48;
                break;
            case 5:
                org[0] += 48;
                org[1] += 48;
                break;
            case 6:
                org[0] -= 48;
                org[1] += 48;
                break;
            case 7:
                org[0] += 48;
                org[1] -= 48;
                break;
            case 8:
                self.s.sound = 0;
                for (n = 0; n < 4; n++)
                    GameMisc.ThrowGib(self, "models/objects/gibs/sm_meat/tris.md2", 500,
                            Defines.GIB_ORGANIC);
                for (n = 0; n < 8; n++)
                    GameMisc.ThrowGib(self, "models/objects/gibs/sm_metal/tris.md2",
                            500, Defines.GIB_METALLIC);
                GameMisc.ThrowGib(self, "models/objects/gibs/chest/tris.md2", 500,
                        Defines.GIB_ORGANIC);
                GameMisc.ThrowHead(self, "models/objects/gibs/gear/tris.md2", 500,
                        Defines.GIB_METALLIC);
                self.deadflag = Defines.DEAD_DEAD;
                return true;
            }
    
            GameBase.gi.WriteByte(Defines.svc_temp_entity);
            GameBase.gi.WriteByte(Defines.TE_EXPLOSION1);
            GameBase.gi.WritePosition(org);
            GameBase.gi.multicast(self.s.origin, Defines.MULTICAST_PVS);
    
            self.nextthink = GameBase.level.time + 0.1f;
            return true;
        }
    };

}