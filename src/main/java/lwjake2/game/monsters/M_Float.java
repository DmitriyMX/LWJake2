/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * 
 * See the GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package lwjake2.game.monsters;

import lwjake2.Defines;
import lwjake2.Globals;
import lwjake2.game.EntDieAdapter;
import lwjake2.game.EntInteractAdapter;
import lwjake2.game.EntPainAdapter;
import lwjake2.game.EntThinkAdapter;
import lwjake2.game.GameAI;
import lwjake2.game.GameBase;
import lwjake2.game.GameCombat;
import lwjake2.game.GameMisc;
import lwjake2.game.GameUtil;
import lwjake2.game.GameWeapon;
import lwjake2.game.Monster;
import lwjake2.game.edict_t;
import lwjake2.game.mframe_t;
import lwjake2.game.mmove_t;
import lwjake2.game.monsters.M_Flash;
import lwjake2.util.Lib;
import lwjake2.util.Math3D;

public class M_Float {

    //    This file generated by ModelGen - Do NOT Modify

    public final static int FRAME_actvat01 = 0;

    public final static int FRAME_actvat31 = 30;

    public final static int FRAME_attak101 = 31;

    public final static int FRAME_attak102 = 32;

    public final static int FRAME_attak103 = 33;

    public final static int FRAME_attak104 = 34;

    public final static int FRAME_attak105 = 35;

    public final static int FRAME_attak106 = 36;

    public final static int FRAME_attak107 = 37;

    public final static int FRAME_attak108 = 38;

    public final static int FRAME_attak114 = 44;

    public final static int FRAME_attak201 = 45;

    public final static int FRAME_attak225 = 69;

    public final static int FRAME_attak301 = 70;

    public final static int FRAME_attak334 = 103;

    public final static int FRAME_death01 = 104;

    public final static int FRAME_death13 = 116;

    public final static int FRAME_pain101 = 117;

    public final static int FRAME_pain102 = 118;

    public final static int FRAME_pain103 = 119;

    public final static int FRAME_pain104 = 120;

    public final static int FRAME_pain107 = 123;

    public final static int FRAME_pain201 = 124;

    public final static int FRAME_pain202 = 125;

    public final static int FRAME_pain203 = 126;

    public final static int FRAME_pain204 = 127;

    public final static int FRAME_pain208 = 131;

    public final static int FRAME_pain301 = 132;

    public final static int FRAME_pain302 = 133;

    public final static int FRAME_pain303 = 134;

    public final static int FRAME_pain304 = 135;

    public final static int FRAME_pain312 = 143;

    public final static int FRAME_stand101 = 144;

    public final static int FRAME_stand152 = 195;

    public final static int FRAME_stand201 = 196;

    public final static int FRAME_stand252 = 247;

    public final static float MODEL_SCALE = 1.000000f;

    static int sound_attack2;

    static int sound_attack3;

    static int sound_death1;

    static int sound_idle;

    static int sound_pain1;

    static int sound_pain2;

    static int sound_sight;

    static EntInteractAdapter floater_sight = new EntInteractAdapter() {
        public String getID() { return "floater_sight"; }
        public boolean interact(edict_t self, edict_t other) {
            GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_sight, 1,
                    Defines.ATTN_NORM, 0);
            return true;
        }
    };

    static EntThinkAdapter floater_idle = new EntThinkAdapter() {
        public String getID() { return "floater_idle"; }
        public boolean think(edict_t self) {
            GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_idle, 1,
                    Defines.ATTN_IDLE, 0);
            return true;
        }
    };

    static EntThinkAdapter floater_fire_blaster = new EntThinkAdapter() {
        public String getID() { return "floater_fire_blaster"; }
        public boolean think(edict_t self) {
            float[] start = { 0, 0, 0 };
            float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
            float[] end = { 0, 0, 0 };
            float[] dir = { 0, 0, 0 };
            int effect;

            if ((self.s.frame == FRAME_attak104)
                    || (self.s.frame == FRAME_attak107))
                effect = Defines.EF_HYPERBLASTER;
            else
                effect = 0;
            Math3D.AngleVectors(self.s.angles, forward, right, null);
            Math3D.G_ProjectSource(self.s.origin,
                    M_Flash.monster_flash_offset[Defines.MZ2_FLOAT_BLASTER_1],
                    forward, right, start);

            Math3D.VectorCopy(self.enemy.s.origin, end);
            end[2] += self.enemy.viewheight;
            Math3D.VectorSubtract(end, start, dir);

            Monster.monster_fire_blaster(self, start, dir, 1, 1000,
                    Defines.MZ2_FLOAT_BLASTER_1, effect);

            return true;
        }
    };

    static mframe_t floater_frames_stand1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null) };

    static mmove_t floater_move_stand1 = new mmove_t(FRAME_stand101,
            FRAME_stand152, floater_frames_stand1, null);

    static mframe_t floater_frames_stand2[] = new mframe_t[] {
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null),
            new mframe_t(GameAI.ai_stand, 0, null) };

    static mmove_t floater_move_stand2 = new mmove_t(FRAME_stand201,
            FRAME_stand252, floater_frames_stand2, null);

    static EntThinkAdapter floater_stand = new EntThinkAdapter() {
        public String getID() { return "floater_stand"; }
        public boolean think(edict_t self) {
            if (Lib.random() <= 0.5)
                self.monsterinfo.currentmove = floater_move_stand1;
            else
                self.monsterinfo.currentmove = floater_move_stand2;
            return true;
        }
    };

    static mframe_t floater_frames_activate[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t floater_move_activate = new mmove_t(FRAME_actvat01,
            FRAME_actvat31, floater_frames_activate, null);

    static EntThinkAdapter floater_run = new EntThinkAdapter() {
        public String getID() { return "floater_run"; }
        public boolean think(edict_t self) {

            if ((self.monsterinfo.aiflags & Defines.AI_STAND_GROUND) != 0)
                self.monsterinfo.currentmove = floater_move_stand1;
            else
                self.monsterinfo.currentmove = floater_move_run;

            return true;
        }
    };

    static mframe_t floater_frames_attack1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_charge, 0, null), // Blaster attack)
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            // BOOM (0, -25.8, 32.5) -- LOOP Starts
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            new mframe_t(GameAI.ai_charge, 0, floater_fire_blaster),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null)
    // -- LOOP Ends
    };

    static mmove_t floater_move_attack1 = new mmove_t(FRAME_attak101,
            FRAME_attak114, floater_frames_attack1, floater_run);

    static float[] aim = { Defines.MELEE_DISTANCE, 0, 0 };

    static EntThinkAdapter floater_wham = new EntThinkAdapter() {
        public String getID() { return "floater_wham"; }
        public boolean think(edict_t self) {

            GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_attack3, 1,
                    Defines.ATTN_NORM, 0);
            GameWeapon.fire_hit(self, aim, 5 + Lib.rand() % 6, -50);
            return true;
        }
    };

    static mframe_t floater_frames_attack2[] = new mframe_t[] {
            new mframe_t(GameAI.ai_charge, 0, null), // Claws
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, floater_wham),
            // WHAM (0, -45, 29.6) -- LOOP Starts
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            //                            -- LOOP Ends
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null) };

    static mmove_t floater_move_attack2 = new mmove_t(FRAME_attak201,
            FRAME_attak225, floater_frames_attack2, floater_run);

    static EntThinkAdapter floater_zap = new EntThinkAdapter() {
        public String getID() { return "floater_zap"; }
        public boolean think(edict_t self) {
            float[] forward = { 0, 0, 0 }, right = { 0, 0, 0 };
            float[] origin = { 0, 0, 0 };
            float[] dir = { 0, 0, 0 };
            float[] offset = { 0, 0, 0 };

            Math3D.VectorSubtract(self.enemy.s.origin, self.s.origin, dir);

            Math3D.AngleVectors(self.s.angles, forward, right, null);
            //FIXME use a flash and replace these two lines with the commented
            // one
            Math3D.VectorSet(offset, 18.5f, -0.9f, 10f);
            Math3D.G_ProjectSource(self.s.origin, offset, forward, right,
                    origin);
            //        G_ProjectSource (self.s.origin,
            // monster_flash_offset[flash_number], forward, right, origin);

            GameBase.gi.sound(self, Defines.CHAN_WEAPON, sound_attack2, 1,
                    Defines.ATTN_NORM, 0);

            //FIXME use the flash, Luke
            GameBase.gi.WriteByte(Defines.svc_temp_entity);
            GameBase.gi.WriteByte(Defines.TE_SPLASH);
            GameBase.gi.WriteByte(32);
            GameBase.gi.WritePosition(origin);
            GameBase.gi.WriteDir(dir);
            GameBase.gi.WriteByte(1); //sparks
            GameBase.gi.multicast(origin, Defines.MULTICAST_PVS);

            GameCombat.T_Damage(self.enemy, self, self, dir, self.enemy.s.origin,
                    Globals.vec3_origin, 5 + Lib.rand() % 6, -10,
                    Defines.DAMAGE_ENERGY, Defines.MOD_UNKNOWN);
            return true;
        }
    };

    static mframe_t floater_frames_attack3[] = new mframe_t[] {
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, floater_zap),
            //                                -- LOOP Starts
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            //                                -- LOOP Ends
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null),
            new mframe_t(GameAI.ai_charge, 0, null) };

    static mmove_t floater_move_attack3 = new mmove_t(FRAME_attak301,
            FRAME_attak334, floater_frames_attack3, floater_run);

    static mframe_t floater_frames_death[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static EntThinkAdapter floater_dead = new EntThinkAdapter() {
        public String getID() { return "floater_dead"; }
        public boolean think(edict_t self) {
            Math3D.VectorSet(self.mins, -16, -16, -24);
            Math3D.VectorSet(self.maxs, 16, 16, -8);
            self.movetype = Defines.MOVETYPE_TOSS;
            self.svflags |= Defines.SVF_DEADMONSTER;
            self.nextthink = 0;
            GameBase.gi.linkentity(self);
            return true;
        }
    };

    static mmove_t floater_move_death = new mmove_t(FRAME_death01,
            FRAME_death13, floater_frames_death, floater_dead);

    static mframe_t floater_frames_pain1[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t floater_move_pain1 = new mmove_t(FRAME_pain101,
            FRAME_pain107, floater_frames_pain1, floater_run);

    static mframe_t floater_frames_pain2[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t floater_move_pain2 = new mmove_t(FRAME_pain201,
            FRAME_pain208, floater_frames_pain2, floater_run);

    static mframe_t floater_frames_pain3[] = new mframe_t[] {
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null),
            new mframe_t(GameAI.ai_move, 0, null) };

    static mmove_t floater_move_pain3 = new mmove_t(FRAME_pain301,
            FRAME_pain312, floater_frames_pain3, floater_run);

    static mframe_t floater_frames_walk[] = new mframe_t[] {
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null),
            new mframe_t(GameAI.ai_walk, 5, null) };

    static mmove_t floater_move_walk = new mmove_t(FRAME_stand101,
            FRAME_stand152, floater_frames_walk, null);

    static mframe_t floater_frames_run[] = new mframe_t[] {
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null),
            new mframe_t(GameAI.ai_run, 13, null) };

    static mmove_t floater_move_run = new mmove_t(FRAME_stand101,
            FRAME_stand152, floater_frames_run, null);

    static EntThinkAdapter floater_walk = new EntThinkAdapter() {
        public String getID() { return "floater_walk"; }
        public boolean think(edict_t self) {
            self.monsterinfo.currentmove = floater_move_walk;
            return true;
        }
    };

    static EntThinkAdapter floater_attack = new EntThinkAdapter() {
        public String getID() { return "floater_attack"; }
        public boolean think(edict_t self) {
            self.monsterinfo.currentmove = floater_move_attack1;
            return true;
        }
    };

    static EntThinkAdapter floater_melee = new EntThinkAdapter() {
        public String getID() { return "floater_melee"; }
        public boolean think(edict_t self) {

            if (Lib.random() < 0.5)
                self.monsterinfo.currentmove = floater_move_attack3;
            else
                self.monsterinfo.currentmove = floater_move_attack2;
            return true;
        }
    };

    static EntPainAdapter floater_pain = new EntPainAdapter() {
        public String getID() { return "floater_pain"; }
        public void pain(edict_t self, edict_t other, float kick, int damage) {
            int n;

            if (self.health < (self.max_health / 2))
                self.s.skinnum = 1;

            if (GameBase.level.time < self.pain_debounce_time)
                return;

            self.pain_debounce_time = GameBase.level.time + 3;
            if (GameBase.skill.value == 3)
                return; // no pain anims in nightmare

            n = (Lib.rand() + 1) % 3;
            if (n == 0) {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain1, 1,
                        Defines.ATTN_NORM, 0);
                self.monsterinfo.currentmove = floater_move_pain1;
            } else {
                GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_pain2, 1,
                        Defines.ATTN_NORM, 0);
                self.monsterinfo.currentmove = floater_move_pain2;
            }
            return;
        }
    };

    static EntDieAdapter floater_die = new EntDieAdapter() {
        public String getID() { return "floater_die"; }

        public void die(edict_t self, edict_t inflictor, edict_t attacker,
                int damage, float[] point) {
            GameBase.gi.sound(self, Defines.CHAN_VOICE, sound_death1, 1,
                    Defines.ATTN_NORM, 0);
            GameMisc.BecomeExplosion1(self);

        }
    };

    /*
     * QUAKED monster_floater (1 .5 0) (-16 -16 -24) (16 16 32) Ambush
     * Trigger_Spawn Sight
     */
    public static void SP_monster_floater(edict_t self) {
        if (GameBase.deathmatch.value != 0) {
            GameUtil.G_FreeEdict(self);
            return;
        }

        sound_attack2 = GameBase.gi.soundindex("floater/fltatck2.wav");
        sound_attack3 = GameBase.gi.soundindex("floater/fltatck3.wav");
        sound_death1 = GameBase.gi.soundindex("floater/fltdeth1.wav");
        sound_idle = GameBase.gi.soundindex("floater/fltidle1.wav");
        sound_pain1 = GameBase.gi.soundindex("floater/fltpain1.wav");
        sound_pain2 = GameBase.gi.soundindex("floater/fltpain2.wav");
        sound_sight = GameBase.gi.soundindex("floater/fltsght1.wav");

        GameBase.gi.soundindex("floater/fltatck1.wav");

        self.s.sound = GameBase.gi.soundindex("floater/fltsrch1.wav");

        self.movetype = Defines.MOVETYPE_STEP;
        self.solid = Defines.SOLID_BBOX;
        self.s.modelindex = GameBase.gi
                .modelindex("models/monsters/float/tris.md2");
        Math3D.VectorSet(self.mins, -24, -24, -24);
        Math3D.VectorSet(self.maxs, 24, 24, 32);

        self.health = 200;
        self.gib_health = -80;
        self.mass = 300;

        self.pain = floater_pain;
        self.die = floater_die;

        self.monsterinfo.stand = floater_stand;
        self.monsterinfo.walk = floater_walk;
        self.monsterinfo.run = floater_run;
        //        self.monsterinfo.dodge = floater_dodge;
        self.monsterinfo.attack = floater_attack;
        self.monsterinfo.melee = floater_melee;
        self.monsterinfo.sight = floater_sight;
        self.monsterinfo.idle = floater_idle;

        GameBase.gi.linkentity(self);

        if (Lib.random() <= 0.5)
            self.monsterinfo.currentmove = floater_move_stand1;
        else
            self.monsterinfo.currentmove = floater_move_stand2;

        self.monsterinfo.scale = MODEL_SCALE;

        GameAI.flymonster_start.think(self);
    }
}